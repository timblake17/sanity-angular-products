'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _get2 = require('lodash/get');

var _get3 = _interopRequireDefault(_get2);

var _kebabCase2 = require('lodash/kebabCase');

var _kebabCase3 = _interopRequireDefault(_kebabCase2);

var _deburr2 = require('lodash/deburr');

var _deburr3 = _interopRequireDefault(_deburr2);

var _debounce2 = require('lodash/debounce');

var _debounce3 = _interopRequireDefault(_debounce2);

var _uniqueId2 = require('lodash/uniqueId');

var _uniqueId3 = _interopRequireDefault(_uniqueId2);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _FormBuilderPropTypes = require('../../FormBuilderPropTypes');

var _FormBuilderPropTypes2 = _interopRequireDefault(_FormBuilderPropTypes);

var _inInput = require('part:@sanity/components/buttons/in-input');

var _inInput2 = _interopRequireDefault(_inInput);

var _inInputStyle = require('part:@sanity/components/buttons/in-input-style');

var _inInputStyle2 = _interopRequireDefault(_inInputStyle);

var _default = require('part:@sanity/components/formfields/default');

var _default2 = _interopRequireDefault(_default);

var _default3 = require('part:@sanity/components/textinputs/default');

var _default4 = _interopRequireDefault(_default3);

var _spinner = require('part:@sanity/components/loading/spinner');

var _spinner2 = _interopRequireDefault(_spinner);

var _PatchEvent = require('../../PatchEvent');

var _PatchEvent2 = _interopRequireDefault(_PatchEvent);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Fallback slugify function if not defined in factory function
// or in the type definition's options
function defaultSlugify(value) {
  return (0, _kebabCase3.default)((0, _deburr3.default)(value));
}

function tryPromise(fn) {
  return Promise.resolve().then(() => fn());
}

const makeCancelable = promise => {
  let hasCanceled_ = false;

  const wrappedPromise = new Promise((resolve, reject) => {
    const cancelError = new Error('Promise was canceled');
    cancelError.isCanceled = true;
    promise.then(val => {
      return hasCanceled_ ? reject(cancelError) : resolve(val);
    });
    promise.catch(error => {
      return hasCanceled_ ? reject(cancelError) : reject(error);
    });
  });

  return {
    promise: wrappedPromise,
    cancel() {
      hasCanceled_ = true;
    }
  };
};

const vanillaState = {
  inputText: undefined,
  loading: false
};

class SlugInput extends _react2.default.Component {

  constructor(props) {
    super(props);
    this.state = vanillaState;

    this.handleChange = event => {
      var _props = this.props;
      const checkValidityFn = _props.checkValidityFn,
            value = _props.value;

      if (this.finalizeSlugTimeout) {
        clearTimeout(this.finalizeSlugTimeout);
      }
      this.setState({ inputText: event.target.value.toString() });
      this.finalizeSlugTimeout = setTimeout(() => {
        const newCurrent = typeof this.state.inputText === 'undefined' ? undefined : this.slugify(this.state.inputText);
        this.setState({ inputText: newCurrent });
        const newVal = { current: newCurrent, auto: value.auto };
        if (checkValidityFn) {
          this.updateValueWithUniquenessCheck(newVal);
          return;
        }
        this.updateValue(newVal);
      }, 500);
    };

    this.handleChangeButtonClick = event => {
      const value = this.props.value;

      this.setState({ inputText: this.state.validationError ? undefined : value.current });
      this.updateValue({ current: value.current, auto: false });
    };

    this.handleAutoButtonClicked = event => {
      const value = this.props.value;

      this.updateValue({ current: value.current, auto: true });
    };

    this.setInput = input => {
      this._input = input;
    };

    this.updateValueWithUniquenessCheck = (0, _debounce3.default)(this.updateValueWithUniquenessCheck.bind(this), 500);
  }

  updateValue(value) {
    this.setState({ loading: false });
    this.props.onChange(_PatchEvent2.default.from(value ? (0, _PatchEvent.set)(value) : (0, _PatchEvent.unset)()));
  }

  updateValueWithUniquenessCheck(value) {
    var _props2 = this.props;
    const type = _props2.type,
          checkValidityFn = _props2.checkValidityFn,
          document = _props2.document;

    const docId = document._id;
    return makeCancelable(tryPromise(() => {
      if (!value.current) {
        this.updateValue(value);
        this.setState({ loading: false, validationError: null });
        return Promise.resolve();
      }
      this.setState({ loading: true, validationError: null });
      return checkValidityFn(type, value.current, docId);
    })).promise.then(validationError => {
      if (!validationError) {
        this.updateValue(value);
        this.setState({ loading: false, validationError: null });
        return Promise.resolve();
      }
      const proposedNewCurrent = `${value.current}-1`;
      const newVal = { current: proposedNewCurrent, auto: false };
      this.setState({
        loading: false,
        inputText: proposedNewCurrent,
        validationError: validationError.toString()
      });
      return this.updateValueWithUniquenessCheck(newVal);
    }).catch(err => {
      if (err.isCanceled) {
        return null;
      }
      console.error(err); // eslint-disable-line no-console
      this.setState({
        loading: false,
        validationError: 'Got javascript error trying to validate the slug. ' + 'See javascript console for more info.'
      });
      this.updateValue({ current: value.current, auto: false });
      return Promise.resolve();
    });
  }

  slugify(sourceValue) {
    if (!sourceValue) {
      return sourceValue;
    }
    var _props3 = this.props;
    const type = _props3.type,
          slugifyFn = _props3.slugifyFn;


    const slugify = (0, _get3.default)(type, 'options.slugifyFn') || slugifyFn;

    return slugify(type, sourceValue);
  }

  componentWillReceiveProps(nextProps) {
    const checkValidityFn = this.props.checkValidityFn;
    const document = nextProps.document,
          type = nextProps.type,
          value = nextProps.value;

    // Reset state if document is changed

    const oldDocId = this.props.document._id;
    const newDocId = document._id;
    if (oldDocId !== newDocId) {
      this.setState(vanillaState);
      return;
    }

    // If slug is set to auto and the source field has changed,
    // verify and set the new slug if it is different from the current one
    let newCurrent;
    const source = (0, _get3.default)(type, 'options.source');
    if (value.auto && source) {
      const newFromSource = typeof source === 'function' ? source(document) : (0, _get3.default)(document, source);
      newCurrent = this.slugify(newFromSource);
    }
    if (newCurrent && newCurrent !== value.current) {
      const newVal = { current: newCurrent, auto: value.auto };
      if (checkValidityFn) {
        this.updateValueWithUniquenessCheck(newVal);
        this.setState({ inputText: newCurrent });
        return;
      }
      this.updateValue(newVal);
    }
  }

  focus() {
    this._input.focus();
  }

  render() {
    var _props4 = this.props;
    const value = _props4.value,
          type = _props4.type,
          level = _props4.level;

    const hasSourceField = type.options && type.options.source;
    var _state = this.state;
    const loading = _state.loading,
          validationError = _state.validationError,
          inputText = _state.inputText;

    const formFieldProps = {
      label: type.title,
      description: type.description,
      level: level
    };

    const inputId = (0, _uniqueId3.default)('FormBuilderSlug');
    const isAuto = type.options && type.options.source && value.auto;
    return _react2.default.createElement(
      _default2.default,
      formFieldProps,
      validationError && _react2.default.createElement(
        'p',
        null,
        validationError
      ),
      _react2.default.createElement(
        'div',
        { className: _inInputStyle2.default.wrapper },
        _react2.default.createElement(_default4.default, {
          id: inputId,
          ref: this.setInput,
          disabled: isAuto,
          placeholder: type.placeholder,
          onChange: this.handleChange,
          value: typeof inputText === 'string' ? inputText : value.current
        }),
        _react2.default.createElement(
          'div',
          { className: _inInputStyle2.default.container },
          loading && _react2.default.createElement(_spinner2.default, { inline: true, message: 'Loading\u2026' }),
          hasSourceField && value.auto && _react2.default.createElement(
            _inInput2.default,
            { onClick: this.handleChangeButtonClick },
            'Edit'
          ),
          hasSourceField && !value.auto && _react2.default.createElement(
            _inInput2.default,
            { onClick: this.handleAutoButtonClicked },
            'Auto'
          )
        )
      )
    );
  }
}
exports.default = SlugInput;
SlugInput.propTypes = {
  type: _FormBuilderPropTypes2.default.type.isRequired,
  level: _propTypes2.default.number.isRequired,
  value: _propTypes2.default.shape({
    current: _propTypes2.default.string,
    auto: _propTypes2.default.bool
  }),
  checkValidityFn: _propTypes2.default.func,
  slugifyFn: _propTypes2.default.func,
  document: _propTypes2.default.object.isRequired,
  onChange: _propTypes2.default.func
};
SlugInput.defaultProps = {
  value: { current: undefined, auto: true },
  onChange() {},
  slugifyFn: defaultSlugify
};