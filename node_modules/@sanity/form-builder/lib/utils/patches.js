'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.setIfMissing = setIfMissing;
exports.insert = insert;
exports.set = set;
exports.unset = unset;
exports.prefixPath = prefixPath;
/*:: import type {Path, PathSegment} from '../typedefs/path'*/
/*:: type HasPath = {
  path: Path
}*/
/*:: type HasOrigin = {
  origin?: 'remote' | 'local'
}*/
/*:: type SetPatch = HasPath & HasOrigin & {
  type: 'set',
  value: any
}*/
/*:: type SetIfMissingPatch = HasPath & HasOrigin & {
  type: 'setIfMissing',
  value: any
}*/
/*:: type UnsetPatch = HasPath & HasOrigin & {
  type: 'unset',
}*/
/*:: type InsertPosition = 'before' | 'after'*/
/*:: type InsertPatch = HasPath & HasOrigin & {
  type: 'insert',
  position: InsertPosition,
  items: any[]
}*/
/*:: export type Patch = SetPatch | SetIfMissingPatch | UnsetPatch | InsertPatch*/
function setIfMissing(value /*: any*/, path /*: Path*/ = []) /*: SetIfMissingPatch*/ {
  return {
    type: 'setIfMissing',
    path,
    value
  };
}

function insert(items /*: any[]*/, position /*: InsertPosition*/, path /*: Path*/ = []) /*: InsertPatch*/ {
  return {
    type: 'insert',
    path,
    position,
    items
  };
}

function set(value /*: any*/, path /*: Path*/ = []) /*: SetPatch*/ {
  return { type: 'set', path, value };
}

function unset(path /*: Path*/ = []) /*: UnsetPatch*/ {
  return { type: 'unset', path };
}

function prefixPath /*:: <T: HasPath>*/(patch /*: T*/, segment /*: PathSegment*/) /*: T*/ {
  return _extends({}, patch, {
    path: [segment, ...patch.path]
  });
}