'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.uploadFileAsset = exports.uploadImageAsset = undefined;
exports.materializeReference = materializeReference;

var _client = require('part:@sanity/base/client');

var _client2 = _interopRequireDefault(_client);

var _preview = require('part:@sanity/base/preview');

var _withMaxConcurrency = require('../../utils/withMaxConcurrency');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const MAX_CONCURRENT_UPLOADS = 4;

function uploadSanityAsset(assetType, file) {
  return _client2.default.observable.assets.upload(assetType, file).map(event => {
    return event.type === 'response' ? { // rewrite to a 'complete' event
      type: 'complete',
      id: event.body.document._id,
      asset: event.body.document
    } : event;
  });
}

const uploadAsset = (0, _withMaxConcurrency.withMaxConcurrency)(uploadSanityAsset, MAX_CONCURRENT_UPLOADS);

const uploadImageAsset = exports.uploadImageAsset = file => uploadAsset('image', file);
const uploadFileAsset = exports.uploadFileAsset = file => uploadAsset('file', file);

function materializeReference(id) {
  return (0, _preview.observeWithPaths)(id, ['originalFilename', 'url', 'metadata']);
}