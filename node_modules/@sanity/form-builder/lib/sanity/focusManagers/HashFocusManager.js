'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }(); /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          * An example of how to sync focus path through document.location.hash



var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _index = require('../../../../mutator/lib/index');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*:: import type {Path, PathSegment} from '../../typedefs/path'*/
/*:: type Props = {
  focusPath: ?any,
  onFocus: () => {},
  onBlur: () => {},
  children: () => any
}*/
/*:: type State = {
  focusPath: Array<*>
}*/

const IS_NUMERIC = /^\d+$/;

function unquote(str) {
  return str.replace(/^['"]/, '').replace(/['"]$/, '');
}

function splitAttr(segment) {
  var _segment$split = segment.split('=='),
      _segment$split2 = _slicedToArray(_segment$split, 2);

  const attr = _segment$split2[0],
        key = _segment$split2[1];

  return { [attr]: unquote(key) };
}

function coerce(segment /*: string*/) /*: PathSegment*/ {
  return IS_NUMERIC.test(segment) ? Number(segment) : segment;
}

function parseSimplePath(focusPathStr) /*: Path*/ {
  return focusPathStr.split(/[[.\]]/g).filter(Boolean).map(seg => seg.includes('==') ? splitAttr(seg) : coerce(seg));
}

function formatPath(focusPath) {
  return (0, _index.arrayToJSONMatchPath)(focusPath);
}

function getHash() {
  return decodeURIComponent(document.location.hash.substring(1));
}

function getPathFromHash() {
  const hash = getHash();
  return hash ? parseSimplePath(hash) : [];
}

class HashFocusManager extends _react2.default.Component /*:: <Props, State>*/ {
  constructor(...args) {
    var _temp;

    return _temp = super(...args), this.state = {
      focusPath: getPathFromHash()
    }, this.handleHashChange = () => {
      this.setState({ focusPath: getPathFromHash() });
    }, this.handleFocus = (focusPath /*: Path*/) => {
      document.location.hash = formatPath(focusPath);
    }, this.handleBlur = () => {
      // this.setState({focusPath: []})
    }, _temp;
  }

  componentDidMount() {
    window.addEventListener('hashchange', this.handleHashChange, false);
  }

  componentWillUnmount() {
    window.removeEventListener('hashchange', this.handleHashChange, false);
  }

  render() {
    return this.props.children({
      onBlur: this.handleBlur,
      onFocus: this.handleFocus,
      focusPath: this.state.focusPath
    });
  }
}
exports.default = HashFocusManager;