'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _omit2 = require('lodash/omit');

var _omit3 = _interopRequireDefault(_omit2);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.default = makeDragAware;

var _domEvent = require('dom-event');

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _debug = require('debug');

var _debug2 = _interopRequireDefault(_debug);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const debug = (0, _debug2.default)('sanity-imagetool');
const win = getWindow();
const supportsTouch = typeof window !== 'undefined' && 'ontouchstart' in window;

// Returns a component that emits `onDragStart, `onDrag` and `onDragEnd` events.
// It handles mouse/touch events the same way
// - `onDragStart` is called with the {x, y} positions relative from the dom node (e.g. where the mousedown event happened)
// - `onDrag` and `onDragEnd` are both called with the {x, y} difference from the previous position
function makeDragAware(Component) {
  var _class, _temp2;

  return _temp2 = _class = class DragAware extends _react2.default.PureComponent {
    constructor(...args) {
      var _temp;

      return _temp = super(...args), this.setDomNode = node => {
        this.domNode = node;
      }, _temp;
    }

    componentDidMount() {
      var _props = this.props;
      const onDragStart = _props.onDragStart,
            onDrag = _props.onDrag,
            onDragEnd = _props.onDragEnd;

      debug('Draggable component did mount');
      const domNode = this.domNode;

      const EVENT_NAMES = {
        start: supportsTouch ? 'touchstart' : 'mousedown',
        move: supportsTouch ? 'touchmove' : 'mousemove',
        end: supportsTouch ? 'touchend' : 'mouseup'
      };

      let dragging = false;
      let currentPos = null;

      let moveListener;
      let endListener;

      const startListener = listen(win, EVENT_NAMES.start, handleMouseDown);

      this.getDisposables = () => {
        return [moveListener, endListener, startListener];
      };

      function handleMouseDown(event) {
        if (dragging) {
          debug('Start cancelled, already a drag in progress');
          return;
        }
        if (event.target !== domNode) {
          // Event happened outside of this dom node
          return;
        }
        event.preventDefault();
        dragging = true;
        const nextPos = getPos(event);
        debug('Drag started %o', nextPos);
        onDragStart(getPositionRelativeToRect(nextPos.x, nextPos.y, domNode.getBoundingClientRect()));
        moveListener = listen(win, EVENT_NAMES.move, handleMouseMove);
        endListener = listen(win, EVENT_NAMES.end, handleMouseUp);
        currentPos = nextPos;
      }

      function handleMouseUp(event) {
        if (!dragging) {
          throw new Error('Got mouseup on a component that was not dragging.');
        }
        event.preventDefault();
        const nextPos = getPos(event);
        onDragEnd(getPositionRelativeToRect(nextPos.x, nextPos.y, domNode.getBoundingClientRect()));
        dragging = false;
        currentPos = null;

        moveListener.dispose();
        moveListener = null;

        endListener.dispose();
        endListener = null;

        debug('Done moving %o', nextPos);
      }

      function handleMouseMove(event) {
        event.preventDefault();
        const nextPos = getPos(event);
        const diff = diffPos(nextPos, currentPos);
        onDrag(diff);
        debug('moving by %o', diff);
        currentPos = nextPos;
      }
    }

    componentWillUnmount() {
      debug('Disposing event listeners');
      this.getDisposables().filter(Boolean).forEach(disposable => disposable.dispose());
    }

    render() {
      return _react2.default.createElement(Component, _extends({ ref: this.setDomNode }, (0, _omit3.default)(this.props, ['onDragStart', 'onDragEnd', 'onDrag'])));
    }
  }, _class.propTypes = {
    onDragStart: _propTypes2.default.func,
    onDrag: _propTypes2.default.func,
    onDragEnd: _propTypes2.default.func
  }, _temp2;
}

function getPositionRelativeToRect(x, y, rect) {
  return {
    x: x - rect.left,
    y: y - rect.top
  };
}

function getWindow() {
  /* global window */
  return typeof window === 'undefined' ? null : window;
}

function getPos(event) {
  if (supportsTouch) {
    return event.touches.length ? getPos(event.touches[0]) : { x: 0, y: 0 };
  }

  return {
    x: event.clientX,
    y: event.clientY
  };
}

function diffPos(pos, otherPos) {
  return {
    x: pos.x - otherPos.x,
    y: pos.y - otherPos.y
  };
}

function listen(element, type, handler) {
  (0, _domEvent.on)(element, type, handler);
  return {
    dispose() {
      (0, _domEvent.off)(element, type, handler);
    }
  };
}