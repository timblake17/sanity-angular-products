'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _debounce2 = require('lodash/debounce');

var _debounce3 = _interopRequireDefault(_debounce2);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _calculateStyles = require('./calculateStyles');

var _calculateStyles2 = _interopRequireDefault(_calculateStyles);

var _debug = require('debug');

var _debug2 = _interopRequireDefault(_debug);

var _constants = require('./constants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const debug = (0, _debug2.default)('sanity-imagetool');

function getCropAspect(crop, srcAspect) {
  const origHeight = 1 / srcAspect;
  const origWidth = srcAspect * origHeight;
  const cropWidth = origWidth - (crop.left + crop.right) * origWidth;
  const cropHeight = origHeight - (crop.top + crop.bottom) * origHeight;
  return cropWidth / cropHeight;
}

class HotspotImage extends _react2.default.PureComponent {
  constructor(...args) {
    var _temp;

    return _temp = super(...args), this.state = {
      containerAspect: null
    }, this.setImageElement = el => {
      this.imageElement = el;
    }, this.handleResize = (0, _debounce3.default)(() => this.updateContainerAspect(this.props)), this.setContainerElement = el => {
      this.containerElement = el;
    }, _temp;
  }

  componentDidMount() {
    const imageElement = this.imageElement;
    // Fixes issues that may happen if the component is rendered on server and mounted after the image has finished loading
    // In these situations, neither the onLoad or the onError events will be called.
    // Derived from http://imagesloaded.desandro.com/
    const alreadyLoaded = imageElement.src && imageElement.complete && imageElement.naturalWidth !== undefined;
    if (alreadyLoaded) {
      debug("Image '%s' already loaded, refreshing (from cache) to trigger onLoad / onError", this.props.src);
      imageElement.src = imageElement.src;
    }

    this.updateContainerAspect(this.props);
    window.addEventListener('resize', this.handleResize);
  }

  componentWillUnmount() {
    window.removeEventListener('resize', this.handleResize);
  }
  componentWillReceiveProps(nextProps) {
    if (nextProps.aspectRatio !== this.props.aspectRatio) {
      this.updateContainerAspect(nextProps);
    }
  }

  updateContainerAspect(props) {
    if (props.aspectRatio === 'auto') {
      const parentNode = this.containerElement.parentNode;
      this.setState({
        containerAspect: parentNode.offsetWidth / parentNode.offsetHeight
      });
    } else {
      this.setState({
        containerAspect: null
      });
    }
  }

  getTargetAspectValue() {
    var _props = this.props;
    const aspectRatio = _props.aspectRatio,
          srcAspectRatio = _props.srcAspectRatio,
          crop = _props.crop;


    if (aspectRatio === 'none') {
      return getCropAspect(crop, srcAspectRatio);
    }
    if (aspectRatio === 'auto') {
      return this.state.containerAspect;
    }
    return aspectRatio;
  }

  render() {
    var _props2 = this.props;
    const srcAspectRatio = _props2.srcAspectRatio,
          crop = _props2.crop,
          hotspot = _props2.hotspot,
          src = _props2.src,
          srcSet = _props2.srcSet,
          alignX = _props2.alignX,
          alignY = _props2.alignY,
          className = _props2.className,
          style = _props2.style,
          alt = _props2.alt,
          onError = _props2.onError,
          onLoad = _props2.onLoad;


    const targetAspect = this.getTargetAspectValue();

    const targetStyles = (0, _calculateStyles2.default)({
      container: { aspectRatio: targetAspect },
      image: { aspectRatio: srcAspectRatio },
      hotspot,
      crop,
      align: {
        x: alignX,
        y: alignY
      }
    });
    return _react2.default.createElement(
      'div',
      { className: className, style: style, ref: this.setContainerElement },
      _react2.default.createElement(
        'div',
        { style: targetStyles.container },
        _react2.default.createElement('div', { style: targetStyles.padding }),
        _react2.default.createElement(
          'div',
          { style: targetStyles.crop },
          _react2.default.createElement('img', {
            ref: this.setImageElement,
            src: src,
            alt: alt,
            srcSet: srcSet,
            onLoad: onLoad,
            onError: onError,
            style: targetStyles.image
          })
        )
      )
    );
  }
}
exports.default = HotspotImage;
HotspotImage.propTypes = {
  src: _propTypes2.default.string.isRequired,
  srcAspectRatio: _propTypes2.default.number.isRequired,
  srcSet: _propTypes2.default.string,
  hotspot: _propTypes2.default.object.isRequired,
  crop: _propTypes2.default.object.isRequired,
  width: _propTypes2.default.number,
  aspectRatio: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.oneOf(['auto', 'none'])]),
  alignX: _propTypes2.default.oneOf(['center', 'left', 'right']),
  alignY: _propTypes2.default.oneOf(['center', 'top', 'bottom']),
  className: _propTypes2.default.string,
  style: _propTypes2.default.object,
  alt: _propTypes2.default.string,
  onError: _propTypes2.default.func,
  onLoad: _propTypes2.default.func
};
HotspotImage.defaultProps = {
  alignX: 'center',
  alignY: 'center',
  crop: _constants.DEFAULT_CROP,
  hotspot: _constants.DEFAULT_HOTSPOT,
  aspectRatio: 'none'
};