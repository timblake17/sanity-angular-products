'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = observeWithPaths;

var _client = require('part:@sanity/base/client');

var _client2 = _interopRequireDefault(_client);

var _observable = require('@sanity/observable');

var _observable2 = _interopRequireDefault(_observable);

var _debounceCollect = require('./utils/debounceCollect');

var _debounceCollect2 = _interopRequireDefault(_debounceCollect);

var _optimizeQuery = require('./utils/optimizeQuery');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

let _globalListener;
const getGlobalListener = () => {
  if (!_globalListener) {
    _globalListener = _observable2.default.from(_client2.default.listen('*[!(_id in path("_.**"))]', {}, { includeResult: false })).share();
  }
  return _globalListener;
};

function listen(id) {
  return _observable2.default.of({ type: 'welcome', documentId: id }).concat(getGlobalListener()).filter(event => event.documentId === id);
}

function fetchAllDocumentSnapshots(selections) {
  const combinedSelections = (0, _optimizeQuery.combineSelections)(selections);
  return _client2.default.observable.fetch((0, _optimizeQuery.toGradientQuery)(combinedSelections)).map(result => (0, _optimizeQuery.reassemble)(result, combinedSelections));
}

const debouncedFetchDocumentSnapshot = (0, _debounceCollect2.default)(fetchAllDocumentSnapshots, 50);

// todo: keep for debugging purposes for now
// function fetchDocumentSnapshot(id, selection) {
//   return client.observable.fetch(`*[_id==$id]{_id,_type,${selection.join(',')}}`, {id})
//     .map(result => result[0])
// }

function observeWithPaths(id, paths) {
  return debouncedFetchDocumentSnapshot(id, paths).concat(listen(id).debounceTime(1000).switchMap(event => debouncedFetchDocumentSnapshot(id, paths)));
}