'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = observeForPreview;

var _resolveRefType = require('./resolveRefType');

var _resolveRefType2 = _interopRequireDefault(_resolveRefType);

var _prepareForPreview = require('./prepareForPreview');

var _prepareForPreview2 = _interopRequireDefault(_prepareForPreview);

var _observable = require('@sanity/observable');

var _observable2 = _interopRequireDefault(_observable);

var _materializePaths = require('./materializePaths');

var _materializePaths2 = _interopRequireDefault(_materializePaths);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function is(typeName, type) {
  return type.name === typeName || type.type && is(typeName, type.type);
}

// Takes a value and its type and prepares a snapshot for it that can be passed to a preview component
function observeForPreview(value, type, fields, viewOptions) {
  if (is('reference', type)) {
    // if the value is of type reference, but has no _ref property, we cannot prepare any value for the preview
    // and the most sane thing to do is to return `null` for snapshot
    if (!value._ref) {
      return _observable2.default.of({ snapshot: null });
    }
    // Previewing references actually means getting the referenced value,
    // and preview using the preview config of its type
    // todo: We need a way of knowing the type of the referenced value by looking at the reference record alone
    return (0, _resolveRefType2.default)(value, type).switchMap(refType => refType ? observeForPreview(value, refType) : _observable2.default.of({ snapshot: null }));
  }

  const selection = type.preview.select;
  if (selection) {
    const configFields = Object.keys(selection);
    const targetFields = fields ? configFields.filter(fieldName => fields.includes(fieldName)) : configFields;
    const paths = targetFields.map(key => selection[key].split('.'));
    return (0, _materializePaths2.default)(value, paths).map(snapshot => ({
      type: type,
      snapshot: (0, _prepareForPreview2.default)(snapshot, type, viewOptions)
    }));
  }
  return _observable2.default.of({
    type: type,
    snapshot: (0, _prepareForPreview.invokePrepare)(type, value, viewOptions)
  });
}