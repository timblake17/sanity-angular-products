'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _values2 = require('lodash/values');

var _values3 = _interopRequireDefault(_values2);

var _sortBy2 = require('lodash/sortBy');

var _sortBy3 = _interopRequireDefault(_sortBy2);

var _identity2 = require('lodash/identity');

var _identity3 = _interopRequireDefault(_identity2);

exports.combineSelections = combineSelections;
exports.toGradientQuery = toGradientQuery;
exports.reassemble = reassemble;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*:: type Path = string[]*/
/*:: type Selection = [string[], Path[]]*/
/*:: type CombinedSelection = {
  ids: string[],
  paths: string[],
  map: number[],
}*/
/*:: type Doc = {
  _id: string
}*/
/*:: type Result = Doc[]*/
function combineSelections(selections /*: Array<Selection>*/) /*: number*/ {
  return (0, _values3.default)(selections.reduce((output, [id, paths], index) => {
    const key = (0, _sortBy3.default)(paths.join(','), _identity3.default);
    if (!output[key]) {
      output[key] = { paths, ids: [], map: [] };
    }
    const idx = output[key].ids.length;
    output[key].ids[idx] = id;
    output[key].map[idx] = index;
    return output;
  }, {}));
}

function stringifyId(id /*: string*/) {
  return JSON.stringify(id);
}

function toSubQuery({ ids, paths }) {
  return `*[_id in [${ids.map(stringifyId).join(',')}]]{_id,_type,${paths.join(',')}}`;
}

function toGradientQuery(combinedSelections /*: CombinedSelection[]*/) {
  return `[${combinedSelections.map(toSubQuery).join(',')}]`;
}

function reassemble(queryResult /*: Result[]*/, combinedSelections /*: CombinedSelection[]*/) {
  return queryResult.reduce((reprojected, subResult, index) => {
    const map = combinedSelections[index].map;
    map.forEach((resultIdx, i) => {
      const id = combinedSelections[index].ids[i];
      reprojected[resultIdx] = subResult.find(doc => doc._id === id);
    });
    return reprojected;
  }, []);
}